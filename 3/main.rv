print_string:
	addi sp, sp, -0x10
	sw fp, 12(sp)
	addi fp, sp, 0x10
	sw ra, -8(fp)

	sw s2, -12(fp)

	addi s2, a0, 0
	print_string_loop:
		lbu a0, 0(s2)
		beq a0, x0, print_string_loop_exit

		call print_char

		addi s2, s2, 1
		jal x0, print_string_loop
	print_string_loop_exit:

	lw s2, -12(fp)

	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x10
	jalr x0, ra, 0

print_s32:
	addi sp, sp, -0x20
	sw fp, 28(sp)
	addi fp, sp, 0x20
	sw ra, -8(fp)

	sw s2, -12(fp)
	sw s3, -16(fp)

	addi s2, a0, 0
	addi s3, fp, -0x11
	sb x0, 0(s3)

	bge s2, x0, print_int_loop
	addi a0, x0, 0x2D
	call print_char
	sub s2, x0, s2

	print_int_loop:
		addi s3, s3, -1
		addi a0, s2, 0
		addi a1, x0, 10
		call divmod
		addi s2, a0, 0
		addi a1, a1, 0x30
		sb a1, 0(s3)
		bne s2, x0, print_int_loop

	addi a0, s3, 0
	call print_string

	lw s3, -16(fp)
	lw s2, -12(fp)

	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x20
	jalr x0, ra, 0

print_results:
	addi sp, sp, -0x10
	sw fp, 12(sp)
	addi fp, sp, 0x10
	sw ra, -8(fp)

	sw s1, -12(fp)
	sw s2, -16(fp)

	addi s1, a0, 0
	addi s2, a1, 0

	li a0, print_results_part1_prefix_string
	call print_string

	addi a0, s1, 0
	call print_s32

	li a0, print_results_part2_prefix_string
	call print_string

	addi a0, s2, 0
	call print_s32

	addi a0, x0, 0xA
	call print_char

	lw s1, -12(fp)
	lw s2, -16(fp)

	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x10
	jalr x0, ra, 0
	
eat_u32:
	addi sp, sp, -0x20
	sw fp, 28(sp)
	addi fp, sp, 0x20
	sw ra, -8(fp)

	sw s1, -12(fp)
	sw s2, -16(fp)
	sw s3, -20(fp)
	sw s4, -24(fp)
	
	addi s1, a0, 0
	addi s2, x0, 0
	addi s4, x0, 0

	eat_u32_loop:
		lbu s3, 0(s1)
		addi s3, s3, -0x30
		addi t0, x0, 10
		bgeu s3, t0, eat_u32_loop_end
		
		addi a0, s2, 0
		addi a1, t0, 0
		call mul

		add s2, a0, s3

		addi s1, s1, 1
		addi s4, s4, 1
		jal x0, eat_u32_loop

	eat_u32_loop_end:

	addi a0, s1, 0
	addi a1, s2, 0
	addi a2, s4, 0

	lw s1, -12(fp)
	lw s2, -16(fp)
	lw s3, -20(fp)
	lw s4, -24(fp)

	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x20
	jalr x0, ra, 0
	
eat_space:
	addi sp, sp, -0x10
	sw fp, 12(sp)
	addi fp, sp, 0x10
	sw ra, -8(fp)

	addi t1, x0, 32
	eat_space_loop:
		lbu t0, 0(a0)
		addi t0, t0, -1
		bgeu t0, t1, eat_space_loop_end
		addi a0, a0, 1
		jal x0, eat_space_loop
	eat_space_loop_end:

	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x10
	jalr x0, ra, 0

eat_prefix:
	addi sp, sp, -0x10
	sw fp, 12(sp)
	addi fp, sp, 0x10
	sw ra, -8(fp)

	addi t0, a0, 0
	addi t1, a1, 0
	addi a1, x0, 0
	eat_prefix_loop:
		lbu t2, 0(t0)
		lbu t3, 0(t1)

		beq t3, x0, eat_prefix_loop_match
		bne t2, t3, eat_prefix_loop_end
		addi t0, t0, 1
		addi t1, t1, 1
		jal x0, eat_prefix_loop

	eat_prefix_loop_match:
	addi a0, t0, 0
	addi a1, x0, 1
	eat_prefix_loop_end:
	
	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x10
	jalr x0, ra, 0
	

main:
	addi sp, sp, -0x20
	sw fp, 28(sp)
	addi fp, sp, 0x20
	sw ra, -8(fp)

	sw s1, -12(fp)
	sw s2, -16(fp)
	sw s3, -20(fp)
	sw s4, -24(fp)
	sw s5, -28(fp)
	sw s6, -32(fp)

	li s1, input
	addi s6, x0, 1
	parse_loop:
		lbu t0, 0(s1)
		beq t0, x0, parse_loop_end

		mulp_test:
			addi a0, s1, 0
			li a1, mulp_string
			call eat_prefix
			addi s1, a0, 0
			beq a1, x0, do_test

			addi a0, s1, 0
			call eat_u32
			addi s1, a0, 0
			beq a2, x0, test_end
			addi t0, x0, 1000
			bge a1, t0, test_end
			addi s2, a1, 0

			lbu t0, 0(s1)
			addi t1, x0, 0x2C
			bne t0, t1, test_end
			addi s1, s1, 1

			addi a0, s1, 0
			call eat_u32
			addi s1, a0, 0
			beq a2, x0, test_end
			addi t0, x0, 1000
			bge a1, t0, test_end
			addi s3, a1, 0

			lbu t0, 0(s1)
			addi t1, x0, 0x29
			bne t0, t1, test_end
			addi s1, s1, 1

			addi a0, s2, 0
			addi a1, s3, 0
			call mul

			li t0, part1_result
			lw t1, 0(t0)
			add t1, t1, a0
			sw t1, 0(t0)

			beq s6, x0, test_end
			li t0, part2_result
			lw t1, 0(t0)
			add t1, t1, a0
			sw t1, 0(t0)
			jal x0, test_end

		do_test:
			addi a0, s1, 0
			li a1, do_string
			call eat_prefix
			addi s1, a0, 0
			beq a1, x0, dont_test
			addi s6, x0, 1
			jal x0, test_end

		dont_test:
			addi a0, s1, 0
			li a1, dont_string
			call eat_prefix
			addi s1, a0, 0
			beq a1, x0, advance
			addi s6, x0, 0
			jal x0, test_end

		advance:
			addi s1, s1, 1
		test_end:
	
		jal x0, parse_loop
	parse_loop_end:

	li a0, part1_result
	lw a0, 0(a0)
	li a1, part2_result
	lw a1, 0(a1)
	call print_results

	lw s1, -12(fp)
	lw s2, -16(fp)
	lw s3, -20(fp)
	lw s4, -24(fp)
	lw s5, -28(fp)
	lw s6, -32(fp)

	lw ra, -8(fp)
	lw fp, -4(fp)
	addi sp, sp, 0x20
	jalr x0, ra, 0

print_results_part1_prefix_string: "Part 1 result: " 0
print_results_part2_prefix_string: 0xA "Part 2 result: " 0
part1_result: 0x00000000
part2_result: 0x00000000

mulp_string: "mul(" 0
do_string: "do()" 0
dont_string: "don't()" 0
